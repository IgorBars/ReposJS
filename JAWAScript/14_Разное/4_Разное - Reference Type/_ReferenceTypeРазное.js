/* JawaScript - _ReferenceTypeРазное
                                            
*/
'use strict';

alert("Start _ReferenceTypeРазное");


let user = {
    name: "Джон",
    hi() { alert(this.name); },
    bye() { alert("Пока"); }
};

user.hi(); // Джон (простой вызов метода работает хорошо)

// теперь давайте попробуем вызывать user.hi или user.bye
// в зависимости от имени пользователя user.name
(user.name == "Джон" ? user.hi : user.bye)(); // Ошибка!

/*
Присмотревшись поближе, в выражении obj.method() можно заметить две операции:

1   Сначала оператор точка '.' возвращает свойство объекта – его метод (obj.method).
2   Затем скобки () вызывают этот метод (исполняется код метода).
*/

// разделим получение метода объекта и его вызов в разных строках
let hi = user.hi;
hi(); // Ошибка, потому что значением this является undefined

/*
Значение ссылочного типа Reference Type – это «триплет»: комбинация из трёх значений (base, name, strict), где:

    base – это объект (ссьілка на объект)
    name – это имя свойства объекта (значение свойства объекта, в д.сл. ф-я)
    strict – это режим исполнения. Является true, если действует строгий режим (use strict).

(в д.сл.: user, "hi", true)

Когда скобки () применяются к значению ссылочного типа (происходит вызов), то они получают полную информацию об объекте 
и его методе, и могут поставить правильный this (user в данном случае, по base).

Ссылочный тип – исключительно внутренний, промежуточный, используемый, 
чтобы передать информацию от точки . до вызывающих скобок ().

При любой другой операции, например, присваивании hi = user.hi, ссылочный тип заменяется на собственно ЗНАЧЕНИЕ user.hi 
(функцию), и дальше работа уже идёт только с ней. Поэтому дальнейший вызов происходит уже без this.

((Для всех остальных операций ССЬІЛОЧНЬІЙ ТИП автоматически становится ЗНАЧЕНИЕМ СВОЙСТВА (в нашем случае функцией).))
*/




alert("End");

