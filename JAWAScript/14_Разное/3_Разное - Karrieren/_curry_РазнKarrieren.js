/* JawaScript - _РазнKarrieren
//"Универсальная каррирующая обертка" для функций разной длиньі
*/
'use strict';

alert("Start _curry_РазнKarrieren");


function curry(func) {

    return function curried(...args) {  // 1. Спочатку приймаємо 1-й аргумент (першу партію аргументів) args

      if (args.length >= func.length) { // а от коли нарещті кількість аргументів у args добралася func.length (кільк арг ф-ї)
        return func.apply(this, args);  // - тоді нарешті виконати вихідну ф-ю з усіма зібраними аргументами
      } else {
        return function(...args2) {  // 2. {Поки кількість аргументів у args менша ніж func.length (кільк арг ф-ї)}, приймаємо наступний аргумент (наступну партію аргументів) args2
          return curried.apply(this, args.concat(args2)); // , добавляємо його до масиву прийнятих аргументів args і рекурсивно викликаємо головну обгортку curried з масивом прийнятих аргументів
        }
      }
    };
}

//  пример функции суммирования с фиксированньім количеством аргументов:
function sum(a, b, c) {
return a + b + c;
}

let curriedSum = curry(sum);  // каррируем функцию суммирования

alert("без каррирования: " + curriedSum(1, 2, 3) ); // 6, всё ещё можно вызывать нормально
alert("каррирование первого аргумента: " +  curriedSum(1)(2, 3) ); // 6, каррирование первого аргумента
alert("каррирование первьіх двух аргумента: " +  curriedSum(1, 2)(3) ); // 6, каррирование первьіх двух аргумента
alert("каррирование всех аргументов: " + curriedSum(1)(2)(3) ); // 6, каррирование всех аргументов

/*
Не понял, а почему условие args.length >= func.length   ?
Почему не args.length === func.length   ?
Как args.length может оказаться больше func.length    ?
Понятно, что в данном примере выполнятся такие условия одновременно, но запутывает.

−

Это защита от случая, когда ты случайно занесешь больше аргументов, чем функции требуется. Аргументы, которые 
не присваиваются и не идут в код, остаются за бортом. Отработают только те, что идут в корректном порядке и 
получают локальное значение в лексическом окружении функции.
*/

alert("End");

