/* JawaScript - Proxy_Разное              Оборачиваем функции: «apply»
Предыдущая реализация декоратора delay(f, ms) на основе функции не перенаправляет операции чтения/записи свойства и другие. 
После обёртывания доступ к свойствам оригинальной функции, таким как name, length, и другим, будет потерян.

Функция-обёртка с прокси перенаправляет операции чтения/записи свойства.
После обёртывания будет доступ к свойствам оригинальной функции,таким как name, length, 
поскольку прокси-обёртка перенаправляет всё к оригинальному объекту.

Ловушка apply(target, thisArg, args) активируется при обертках прокси функции
  - target – это оригинальный объект (как мы помним, функция – это объект в языке JavaScript),
  - thisArg – это контекст this.
  - args – список аргументов.
*/
'use strict';
alert("Start _8applyDelay_РазноеProxy");    // проксируем функцию ловушкой apply(target, thisArg, args)


function delay(f, ms) {
    return new Proxy(f, {
      apply(target, thisArg, args) {  // Ловушка apply(target, thisArg, args){} фирменно перенаправляет операции чтения/записи свойства к оригинальному объекту.
        setTimeout(() => target.apply(thisArg, args), ms);  // новая функциональность - вьізвать f с нужн this и args через ms
      }
    });
}

function sayHi(user) {
    alert(`Привет, ${user}!`);
}
  
sayHi = delay(sayHi, 3000);

alert(sayHi.length); // 1 (*) прокси перенаправляет чтение свойства length на исходную функцию

sayHi("Вася"); // Привет, Вася! (через 3 секунды)



alert("End");

