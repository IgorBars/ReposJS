/* JawaScript - Proxy_Разное
Мы можем хранить функцию revoke в WeakMap, чтобы легко найти её по объекту прокси:
*/
'use strict';

alert("Start _14revokeWeakMap_РазноеProxy");

let revokes = new WeakMap();

let object = {
  data: "Важные данные"
};

let {proxy, revoke} = Proxy.revocable(object, {});

revokes.set(proxy, revoke);

alert(proxy.data);  // Важные данные

// ..позже в коде..
revoke = revokes.get(proxy);  // т.е. для прокси proxy именно его функция revoke (если много прокси, или чтоб не искать имя-revoke)
revoke();

// прокси больше не работает (отключён)
try {
    alert(proxy.data); // Ошибка (прокси отключён)
} catch (er) {
      alert(er.message);
}
//Вызов revoke() удаляет все внутренние ссылки на оригинальный объект из прокси, 
//так что между ними больше нет связи, и оригинальный объект теперь может быть очищен сборщиком мусора.
  
//Мы использовали WeakMap вместо Map, чтобы не блокировать сборку мусора. 
//Если прокси объект становится недостижимым (то есть на него больше нет ссылок), 
//то WeakMap позволяет сборщику мусора удалить его из памяти вместе с соответствующей функцией revoke, 
//которая в этом случае больше не нужна.


alert("End");

