/* JawaScript - 6_asyncCatch_PromisyAsync
Если у нас нет try..catch, асинхронная функция будет возвращать завершившийся с ошибкой промис (в состоянии rejected). 
В этом случае мы можем использовать метод .catch промиса, чтобы обработать ошибку:
*/
'use strict';
alert("Start 6_asyncCatch_PromisyAsync");


async function f() {
    let response = await fetch('http://no-such-url');
}

// f() вернёт промис в состоянии rejected
f().catch(alert); // TypeError: failed to fetch // (*)


// Если забыть добавить .catch, то будет сгенерирована ошибка «Uncaught promise error» и информация об этом будет выведена в консоль. 
// Такие ошибки можно поймать глобальным обработчиком, о чём подробно написано в разделе Промисы: обработка ошибок.


// При работе с async/await, .then используется нечасто, так как await автоматически ожидает завершения выполнения промиса. 
//В этом случае обычно (но не всегда) гораздо удобнее перехватывать ошибки, используя try..catch, нежели чем .catch.

//Но на верхнем уровне вложенности (вне async–функций) await использовать нельзя, 
//поэтому .then/catch для обработки финального результата или ошибок – обычная практика.

alert("End");

