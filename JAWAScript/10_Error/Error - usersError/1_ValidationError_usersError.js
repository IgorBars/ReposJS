/* JawaScript - 1_ValidationError_usersError
Создадим собственный класс ошибок для разных вещей.
Наши ошибки должны поддерживать базовые свойства, такие как message, name и, желательно, stack.

    JavaScript позволяет вызывать throw с любыми аргументами, то есть технически
 наши классы ошибок не нуждаются в наследовании от Error.
    Но если использовать наследование, то появляется возможность идентификации
 объектов ошибок посредством obj instanceof Error.
    Итак, расширяем класс Error.

Рассмотрим функцию readUser(json), которая должна читать данные пользователя в формате JSON.
*/
'use strict';

alert("Start 1_ValidationError_usersError");

//Пример того, как может выглядеть корректный json:
let json = `{ "name": "John", "age": 30 }`;
//Наша функция readUser(json) будет не только читать JSON-данные, но и проверять их («валидировать»).
// Если необходимые поля отсутствуют или данные в неверном формате, то это будет ошибкой. 
//Но не синтаксической ошибкой SyntaxError, потому что данные синтаксически корректны. Это будет другая ошибка.
//Назовём её ошибкой валидации ValidationError и создадим для неё класс. Ошибка этого вида должна содержать информацию о поле,
// которое является источником ошибки.

//Класс Error встроенный, вот его примерный код, просто чтобы мы понимали, что расширяем:
// "Псевдокод" встроенного класса Error, определённого самим JavaScript:
// class Error {
//   constructor(message) {
//     this.message = message;
//     this.name = "Error"; // (разные имена для разных встроенных классов ошибок)
//     // this.stack = <стек вызовов>; // нестандартное свойство, но обычно поддерживается
//   }
// }

class ValidationError extends Error {
  constructor(message) {            //         собственньій конструктор класса ValidationError
    super(message);                 // (1)  родительский конструктор устанавливает свойство message.
//Родительский конструктор также устанавливает свойство name для "Error",
    this.name = "ValidationError";  // (2)   сбрасываем свойство name на правильное значение (ради єтой строчки писали собственньій конструктор)
  }
}
  
function test() {
  throw new ValidationError("Упс!");
}
  
try {
  test();
} catch(err) {
  alert(err.message);   // Упс!
  alert(err.name);      // ValidationError
  alert(err.stack);     // список вложенных вызовов с номерами строк для каждого
}

// Обратите внимание: в строке (1) вызываем родительский конструктор. 
//JavaScript требует от нас вызова super в дочернем конструкторе, так что это обязательно. 
//Родительский конструктор устанавливает свойство message.

// Родительский конструктор также устанавливает свойство name для "Error",
// поэтому в строке (2) мы сбрасываем его на правильное значение.

alert("End");

