/* JawaScript - 3_progress_setTimeout_microMacroTaskRaznoe               

Ещё одно преимущество разделения на части крупной задачи в браузерных скриптах – это возможность показывать индикатор выполнения.

РЕНДЕРИНГ (отрисовка страницы) никогда не происходит во время выполнения задачи движком.
Браузер отрисовывает содержимое страницы [РЕНДЕРИНГ] после того, как заканчивается выполнение текущего кода (макрозадачи и 
  последующих микрозадач). 

Не имеет значения, насколько долго выполняется текущий код (макрозадача и последующие микрозадачи). 
Изменения в DOM отображаются только после её комплектного завершения.

Если мы разобьём тяжёлую задачу(макрозадачу) на части (несколько макрозадач), используя setTimeout, то изменения индикатора 
будут отрисованы в промежутках между частями (макрозадачами комплектно с соотв микрозадачами), а именно перед очередной макрозадачей.

<div id="progress"></div>
*/

'use strict';
alert("Start 3_progress_setTimeout_microMacroTaskRaznoe");


let i = 0;

function count() {

  // сделать часть крупной задачи (*) [макрозадача: блок do и блок if]         НАЧАЛО вьіполнения макрозадачи SCRIPT(очередь макрозадач пуста)
  do {                                                                      // при появлении новой макрозадачи (например, событие onclick)
    i++;                                                                    // она ставится в очередь макрозадач следующей (N1)
    progress.innerHTML = i;
  } while (i % 1e3 != 0);

  if (i < 1e7) {
    setTimeout(count);                                                      // макрозадача setTimeout ставится в очередь макрозадач (N2) (после событие onclick (N1))
  }                                                                         // КОНЕЦ вьіполнения макрозадачи SCRIPT(очередь макрозадач = 2 задачи)
                                                                            // ЗДЕСЬ вьіполняется макрозад события onclick из очереди макрозадач
}                                                                           // СЛЕДУЮЩАЯ вьіполняются макрозад setTimeout из очереди макрозадач

count();


alert("End");
/* 
Теперь если новая сторонняя задача (например, событие onclick) появляется, пока движок занят выполнением 1-й части, 
то она становится в очередь, и затем выполняется, когда 1-я часть завершена, перед следующей частью. 
Периодические возвраты в событийный цикл между запусками count дают движку достаточно «воздуха», 
чтобы сделать что-то ещё, отреагировать на действия пользователя.


*/