/* JawaScript - 8_1_methods_TypedArray_ArrayBufferBinDate               Методы TypedArray

Типизированные массивы TypedArray, за некоторыми заметными исключениями, имеют те же методы, что и массивы Array.

Мы можем обходить их, вызывать map, slice, find, reduce и т.д.
НО отсутствуют методьі вьірезания/добавления данньіх:
  - Нет метода splice – мы не можем удалять значения, потому что типизированные массивы – это всего лишь представления данных из буфера, 
    а буфер – это непрерывная область памяти фиксированной длины. Мы можем только записать 0 вместо значения.
  - Нет метода concat.

Зато есть два дополнительных метода:
  - arr.set(fromArr, [offset]) добавить "concat" (копирует) ВСЕ элементы из fromArr в arr, начиная с позиции offset (0 по умолчанию).
  - arr.subarray([begin, end]) создаёт новое представление того же типа для данных, начиная с позиции begin до end (не включая). 
    Это похоже на метод slice (который также поддерживается), но при этом ничего не копируется – просто создаётся новое 
    представление, чтобы совершать какие-то операции над указанными данными. 
    Изменения в содержимом созданного подмассива повлияют на исходный массив и наоборот 
*/

'use strict';
alert("Start 8_1_methods_TypedArray_ArrayBufferBinDate");

let a = new Uint8Array([254, 255, 253]);

let ar = new Uint8Array([254, 255]);

let arr = new Uint16Array(2);       // создаём типизированный массив для 2 целых 16-битных чисел без знака (єто размер НАВСЕГДА)

alert( arr.BYTES_PER_ELEMENT );     // 2 байта на число

alert( arr.byteLength );            // 4 (жесткий размер массива в байтах)

arr.set(ar); 

alert( arr.byteLength );            // 4 ([254, 255])

// arr.set(a);          //  - ОШИБКА   так как размер arr 2-численньій, при копировании с 3-численного массива - ОШИБКА       (!!!)

let arr1 = new Uint16Array();       //  без длиньі - не принимает
alert(arr1.byteLength);             // 0
// arr1.set(a);         // - ОШИБКА
arr1[0] = 251; alert(arr1[0]);      // undefined


alert("End");