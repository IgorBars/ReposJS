/* JawaScript - 5_TypedArray_length_ArrayBufferBinDate               TypedArray(length)

TypedArray (типизированный бинарньій массив) - Общий термин для всех представлений Uint8Array, Uint32Array и т.д.

Они уже намного больше напоминают обычные массивы: элементы проиндексированы, и возможно осуществить обход содержимого.

Конструкторы типизированных массивов (будь то Int8Array или Float64Array, без разницы) ведут себя по-разному в зависимости от типа передаваемого им аргумента.

Есть 5 вариантов создания типизированных (бинарньіх) массивов:
  new TypedArray(buffer, [byteOffset], [length]);
  new TypedArray(object);
  new TypedArray(typedArray);
  new TypedArray(length);
  new TypedArray();

1. Если передан аргумент типа ArrayBuffer, то создаётся объект-представление для него. Мы уже использовали этот синтаксис ранее.
    Дополнительно можно указать аргументы byteOffset (0 по умолчанию) и length (до конца буфера по умолчанию), тогда представление будет покрывать только часть данных в buffer.

2. Если в качестве аргумента передан Array или какой-нибудь псевдомассив, то будет создан типизированный массив такой же длины и с тем же содержимым.
    Мы можем использовать эту возможность, чтобы заполнить типизированный массив начальными данными.

3. Если в конструктор передан другой объект типа TypedArray, то делается то же самое: создаётся типизированный массив с такой же длиной и в него копируется содержимое. 
    При необходимости значения будут приведены к новому типу.

4. Если передано число length – будет создан типизированный массив, содержащий именно столько элементов. 
    Размер нового массива в байтах (byteLength) будет равен числу элементов length, умноженному на размер одного элемента TypedArray.BYTES_PER_ELEMENT:
*/

'use strict';
alert("Start 4_Uint16Array_Uint8Array_ArrayBufferBinDate");


let arr = new Uint16Array(4);   // создаём типизированный массив для 4 целых 16-битных чисел без знака (4 x (16/8) = 8 Байт всего)
alert( Uint16Array.BYTES_PER_ELEMENT ); // 2 байта на число (Uint8Array => 1)
alert( arr.byteLength ); // 8 (размер массива в байтах)

let arr8 = new Uint8Array([257, 1, 2, 3]);
alert(arr8[0]);                               // 1
// другое представление на тех же данных
let arr16 = new Uint16Array(arr8.buffer);
alert(arr16[0]);                               // 257


alert("End");

// 5. При вызове без аргументов будет создан пустой типизированный массив.