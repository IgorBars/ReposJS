/* JawaScript - 4_URL_a_click_BlobBinaryDate               a + click

Blob может быть использован как URL для <a>, <img> или других тегов, для показа содержимого.
(Если мьі имеем содержимое и хотим его загрузить/показать, навешиваем ему Blob-URL и переходим по єтому временно-разовому URL)

Мы также можем создать ссылку динамически, используя только JavaScript, и эмулировать на ней клик, используя link.click(), 
тогда загрузка начнётся автоматически.

Пример. Cоздание «на лету» и загрузка Blob-объекта без использования HTML:
*/

'use strict';
alert("Start 4_URL_a_click_BlobBinaryDate");


let link = document.createElement('a');

link.download = 'hello.txt';          // не навигация, а ЗАГРУЗИТЬ файл и назвать его hello.txt

let blob = new Blob(['Hello, world!'], {type: 'text/plain'});

link.href = URL.createObjectURL(blob);  // сгенерировать и присвоить временную URL на blob

link.click();                           // эмулировать клик на a (хранится в переменной link)

URL.revokeObjectURL(link.href);     // после загрузки удалить временную ссьілку (уборщик мусора освободит область памяти от blob)


alert("End");

/*
Браузер для каждого URL, сгенерированного через URL.createObjectURL, сохраняет карту соответствия URL → Blob.
Сгенерированный url действителен, только пока текущий документ открыт.

Пока в карте соответствия существует ссылка на Blob, он находится в памяти. Браузер не может освободить память, 
занятую Blob-объектом.

Ссылка в карте соответствия автоматически удаляется при выгрузке документа, после этого также освобождается память. 
Но если приложение имеет длительный жизненный цикл, это может произойти не скоро.

URL.revokeObjectURL(url) удаляет внутреннюю ссылку на объект, что позволяет удалить его (если нет другой ссылки) 
сборщику мусора, и память будет освобождена.
*/